# Tag based release.
# Build and publish to github.
# Publish to nuget
# Uses the provided tag as the version.
#
# Tag must start with v
# Only works on selected branches
#
name: release via tag

on:
  push:
    tags:
    - "v*"
env:
  PackTarget: src/kwld.Xunit.Ordering
defaults:
  run: 
    shell: pwsh
jobs:
  version_info:
    name: 'read version info from tag'
    runs-on: ubuntu-latest
    outputs:
      is_preview: '${{steps.version_from_tag.outputs.is_preview}}'
      version_prefix: '${{steps.version_from_tag.outputs.version_prefix}}'
      version_suffix: '${{steps.version_from_tag.outputs.version_suffix}}'
      package_version: '${{steps.version_from_tag.outputs.package_version}}'      
    steps:
      - name: version_from_tag
        id: version_from_tag
        shell: pwsh
        run: |
          $tagVersion = "${{github.ref_name}}".Substring(1);

          $parts = $tagVersion.Split('-');

          $VersionPrefix = $parts[0];
          echo version_prefix="$VersionPrefix" >> $env:GITHUB_OUTPUT

          $VersionSuffix =  if($parts.Length -gt 1){$parts[1]}else{""}
          echo version_suffix="$VersionSuffix" >> $env:GITHUB_OUTPUT

          $isPreview = if($VersionSuffix -eq ""){"false"}else{"true"}
          echo is_preview="$isPreview" >> $env:GITHUB_OUTPUT

          $PackageSuffix = if($VersionSuffix -eq ""){""}else{"-$($VersionSuffix)"}
          $PackageVersion = "$($VersionPrefix)$($PackageSuffix)"
          echo package_version="$PackageVersion" >> $env:GITHUB_OUTPUT
    
      - name: results
        run: |
         echo IsPreview - ${{steps.version_from_tag.outputs.is_preview}}
         echo VersionPrefix - ${{steps.version_from_tag.outputs.version_prefix}}
         echo VersionSuffix - ${{steps.version_from_tag.outputs.version_suffix}}
         echo PackageVersion - ${{steps.version_from_tag.outputs.package_version}}

  build:
    runs-on: ubuntu-latest
    name: "Build release package"
    needs: "version_info"
    if: needs.version_info.outputs.package_version != ''
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          8.0.x

    - name: Restore dependencies
      run: dotnet restore --locked-mode src/

    - name: "Update Files"
      shell: pwsh
      run: |
        $version = "${{needs.version_info.outputs.package_version}}";
        write-host "Package Version - '$version'"
        
        ./build/update-files.ps1 -PackageVersion $version

    - name: Build
      run: > 
        dotnet build
        -c Release
        --no-restore
        -p:GeneratePackageOnBuild=false
        -p:ContinuousIntegrationBuild=true
        -p:VersionPrefix=${{needs.version_info.outputs.version_prefix}}
        -p:VersionSuffix=${{needs.version_info.outputs.version_suffix}}
        src/

    - name: Test
      run: >
        dotnet test 
        -c Release 
        --no-build 
        --verbosity normal 
        --logger trx 
        --results-directory "TestResults" 
        src/
    
    - name: create packages folder
      run: |
        if(!(Test-path -Path packages)) {
          New-Item packages -ItemType Directory
        }
    - name: Pack
      run: >
        dotnet pack 
        -c Release 
        --no-build
        --include-symbols
        -p:ContinuousIntegrationBuild=true 
        -p:PackageVersion=${{needs.version_info.outputs.package_version}}
        -o packages
        ${{env.PackTarget}}
        
    - name: Keep package artifact
      uses: actions/upload-artifact@v3
      with:
        name: package
        path: packages/
        if-no-files-found: error
        
    - name: Nuget publish
      run: >
        dotnet nuget push
        "packages/*.*"
        --api-key ${{secrets.NUGETPUSH}}
        --source https://api.nuget.org/v3/index.json

    - name: Create release
      uses: ncipollo/release-action@v1      
      with:
        draft: false
        prerelease: ${{needs.version_info.outputs.is_preview}}
        artifacts: "./packages/*"
   